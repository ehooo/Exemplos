/*
  https://github.com/sirleech/Webduino/
  https://github.com/markruys/arduino-DHT

  @author Victor Torre (aka ehooo) https://github.com/ehooo
  Using Webduino library
*/

#include <SPI.h>
#include <Wire.h>
#include <Ethernet.h>
#include "DHT.h"
#include "WebServer.h"
#include "Adafruit_Sensor.h"
#include "Adafruit_BMP085_U.h"

#define DEBUG
#define WEBDUINO_SERIAL_DEBUGGING 0
#define WEBDUINO_FAVICON_DATA { 0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, \\
	0x44, 0x52, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x08, 0x06, 0x00, 0x00, 0x00, 0x1F, 0xF3, 0xFF, 0x61, \\
	0x00, 0x00, 0x01, 0x5A, 0x49, 0x44, 0x41, 0x54, 0x38, 0x8D, 0xAD, 0x53, 0x31, 0x4B, 0xC3, 0x40, 0x14, 0xFE, 0xEE, \\
	0x2C, 0xED, 0x5A, 0xC4, 0xA5, 0x1D, 0x92, 0xC9, 0x66, 0x28, 0x05, 0x0B, 0x5D, 0x85, 0x88, 0x83, 0x73, 0xC7, 0x6E, \\
	0x92, 0x29, 0x5B, 0x67, 0x1D, 0xCC, 0x65, 0x71, 0x77, 0x32, 0x8B, 0x11, 0x27, 0x47, 0x5D, 0x3B, 0x14, 0xF2, 0x03, \\
	0x0A, 0x15, 0xC4, 0xA1, 0x3A, 0x68, 0x32, 0xB4, 0x4B, 0x91, 0x82, 0x2E, 0x2D, 0xD8, 0xE7, 0x60, 0xEF, 0xB8, 0xB4, \\
	0x0D, 0x58, 0xF1, 0x83, 0xE3, 0xE0, 0x7D, 0xEF, 0xFB, 0xDE, 0xDD, 0xBB, 0x77, 0x8C, 0x88, 0xA0, 0x63, 0xEB, 0xD4, \\
	0xAB, 0xCC, 0x0D, 0xB3, 0x05, 0x40, 0x20, 0x0D, 0xC1, 0x93, 0xF8, 0xF6, 0xEB, 0xDC, 0x7F, 0xD6, 0x83, 0x4C, 0x37, \\
	0x60, 0x41, 0xE8, 0xAD, 0x11, 0x2E, 0x43, 0x90, 0xEB, 0xF8, 0x2B, 0x06, 0x2C, 0x08, 0x29, 0x53, 0xB2, 0x06, 0xE4, \\
	0x3A, 0x0C, 0x00, 0xB8, 0x56, 0x79, 0x23, 0x48, 0x0D, 0xE3, 0x27, 0x67, 0x95, 0xB9, 0x61, 0x0E, 0x00, 0x60, 0x6F, \\
	0x67, 0x1B, 0xC5, 0x7C, 0x01, 0x93, 0xD9, 0x14, 0x0F, 0xE3, 0xF7, 0x94, 0x60, 0x1D, 0xC7, 0x93, 0xD8, 0xCA, 0x2D, \\
	0x1A, 0x86, 0xEB, 0x83, 0x7D, 0x1C, 0x5B, 0xBB, 0x4A, 0x10, 0x0D, 0x47, 0x68, 0x76, 0xBA, 0x00, 0x80, 0xBB, 0xA3, \\
	0x43, 0xD8, 0xE5, 0x92, 0xE2, 0xEE, 0x5F, 0x63, 0x34, 0x3B, 0x5D, 0xCC, 0x0D, 0xB3, 0xC5, 0x70, 0x79, 0x45, 0xA2, \\
	0x51, 0x87, 0xD7, 0xA8, 0x83, 0x05, 0xA1, 0x7E, 0x47, 0x44, 0xC3, 0x11, 0x00, 0xC0, 0x2E, 0x97, 0x56, 0x38, 0xBF, \\
	0xD7, 0x87, 0xE8, 0xF5, 0x7F, 0x7A, 0xD0, 0xAE, 0x55, 0x53, 0x09, 0x8B, 0x3B, 0xC2, 0x2E, 0x97, 0x52, 0x62, 0x72, \\
	0x1D, 0xC5, 0xB5, 0x6B, 0x55, 0xA8, 0x26, 0x16, 0x0B, 0x79, 0x95, 0x20, 0xD7, 0x32, 0x64, 0x4C, 0xEE, 0x52, 0x93, \\
	0x03, 0x80, 0xB7, 0x8F, 0x4F, 0xE5, 0x9C, 0x05, 0x16, 0x84, 0x20, 0xD7, 0x51, 0x39, 0x93, 0xE9, 0x4C, 0x9D, 0x40, \\
	0xDC, 0x0C, 0x5E, 0x56, 0xAA, 0xCA, 0x1E, 0x44, 0xC3, 0x51, 0xEA, 0xE8, 0x92, 0xBB, 0x78, 0x7C, 0x02, 0x00, 0xA1, \\
	0x9E, 0xF1, 0x2F, 0xAF, 0xC0, 0x93, 0xD8, 0x62, 0x44, 0xA4, 0x46, 0x78, 0xC3, 0x39, 0x10, 0xE4, 0x3A, 0xFE, 0xFF, \\
	0x8C, 0xB2, 0x16, 0x10, 0xBF, 0xD0, 0x0A, 0x29, 0x4E, 0x19, 0x2C, 0x4C, 0x7C, 0x9E, 0xC4, 0x56, 0x86, 0x91, 0xE0, \\
	0x49, 0x6C, 0xE9, 0x3F, 0x11, 0x00, 0xBE, 0x01, 0xD2, 0x4F, 0xBA, 0x6E, 0xF2, 0x6A, 0xEE, 0xB5, 0x00, 0x00, 0x00, \\
	0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82 }

static uint8_t mac[] = { 0x02, 0xAA, 0xBB, 0xCC, 0x00, 0x22 };
static uint8_t ip[] = { 192, 168, 0, 51 };

#define DHT_SENSOR_PIN 2
WebServer webserver("",80);
DHT dht;

boolean bmp_on=true;
Adafruit_BMP085_Unified bmp = Adafruit_BMP085_Unified(10085);

float dato;
char buff[8];

void defaultCmd(WebServer &server, WebServer::ConnectionType type, char *, bool){
  if (type == WebServer::POST){
    Serial.println("Redirecting to /");
    server.httpSeeOther("/");
    return;
  }

  server.httpSuccess();
  if (type == WebServer::GET){
    Serial.println("HTML base");
    P(message) = 
"<!DOCTYPE html><html><head>"
  "<title>Meteo Webduino</title>"
  //"<meta http-equiv='Content-Script-Type' content='text/javascript'>"
  "<script src='//code.jquery.com/jquery-2.0.3.js'></script>"
  "<link href='//netdna.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap.min.css' rel=stylesheet />"
  "<script src='//netdna.bootstrapcdn.com/bootstrap/3.0.3/js/bootstrap.min.js'></script>"
  "<style>  </style>"
  "<script>"
    "function DHT() {"
      "$.getJSON('/dht.json',function(data){"
        "$('#dht_s').text(data.status);"
        "$('#dht_h').text(data.humidity);"
        "$('#dht_t').text(data.temperature);"
      "});"
    "};"
    "function BMP() {"
      "$.getJSON('/bmp.json',function(data){"
        "$('#bmp_p').text(data.pressure);"
        "$('#bmp_t').text(data.temperature);"
        "$('#bmp_a').text(data.altitude);"
      "});"
    "};"
    "function update() {"
      "DHT();"
      "BMP();"
    "};"
    "$(document).ready(function(){ "
      "update();"
      "$('refresh').click(update);"
    "});"
  "</script>"
"</head>"
"<body>"
  "<h2>Sensor data</h2>"
  "<table>"
  "<tr><th>dht status</th><td id='dht_s'></td></tr>"
  "<tr><th>dht humidity </th><td id='dht_h'></td></tr>"
  "<tr><th>dht temperature (C)</th><td id='dht_t'></td></tr>"

  "<tr><th>bmp pressure (hPa)</th><td id='bmp_p'></td></tr>"
  "<tr><th>bmp temperature (C)</th><td id='bmp_t'></td></tr>"
  "<tr><th>bmp altitude (n)</th><td id='bmp_a'></td></tr>"
  "</table>"
  "<button type='button' class='btn btn-primary' id='refresh'>Refrestar</button>"
"</body>"
"</html>";
    server.printP(message);
  }
  Serial.println("Done");
}

void dhtCmd(WebServer &server, WebServer::ConnectionType type, char *, bool){
  server.httpSuccess("application/json");
  if (type == WebServer::GET || type == WebServer::POST){//*
    Serial.println("DHT json");
    server.write("{ \"status\":  \"");
    server.write(dht.getStatusString());

    server.write("\", \"humidity\": ");
    dato = dht.getHumidity();
    dtostrf(dato, 5, 2, buff);
    server.write(buff);
#ifdef DEBUG
    Serial.print("Humidity: ");
    Serial.print(buff);
    Serial.println("");
#endif
    server.write(", \"temperature\": ");
    dato = dht.getTemperature();
    dtostrf(dato, 5, 2, buff);
    server.write(buff);
#ifdef DEBUG
    Serial.print("Temperature: ");
    Serial.print(buff);
    Serial.println(" C");
#endif
    server.write("}");
  }
  Serial.println("Done");
}

void bmpCmd(WebServer &server, WebServer::ConnectionType type, char *, bool){
  Serial.println("BMP json");
  server.httpSuccess("application/json");
  if (type == WebServer::HEAD) return;
  if(!bmp_on){
    server.write("{ \"error\":  \"Sensor BMP085 no detected\"");
  }else{
    sensors_event_t event;
    bmp.getEvent(&event);

    if (event.pressure) {
      server.write("{ \"pressure\":  ");
      dtostrf(event.pressure, 5, 2, buff);
      server.write(buff);
#ifdef DEBUG
      Serial.print("Pressure: ");
      Serial.print(buff);
      Serial.println(" hPa");
#endif

      server.write(", \"temperature\": ");
      bmp.getTemperature(&dato);
      dtostrf(dato, 5, 2, buff);
      server.write(buff);
#ifdef DEBUG
      Serial.print("Temperature: ");
      Serial.print(buff);
      Serial.println(" C");
#endif

      server.write(", \"altitude\": ");
      dato = bmp.pressureToAltitude(SENSORS_PRESSURE_SEALEVELHPA, event.pressure, dato);
      bmp.getTemperature(&dato);
      dtostrf(dato, 5, 2, buff);
      server.write(buff);
      server.write(" }");

#ifdef DEBUG
      Serial.print("Altitude: ");
      Serial.print(buff);
      Serial.println(" m");
#endif
    } else {
      Serial.println("Sensor error");
      server.write("{ \"error\":  \"Sensor BMP085 error\"");
    }
    Serial.println("Done");
  }
}

void setup(){
  Serial.begin(9600);
  while(!Serial){;}

  Serial.println("Iniciando DHT!!");
  dht.setup(DHT_SENSOR_PIN);

  Serial.println("Iniciando BMP085!!");
  if(!bmp.begin()){
    Serial.print("Ooops, no BMP085 detected ... Check your wiring or I2C ADDR!");
    bmp_on = false;
  }

  Serial.println("Iniciando Red!!");
  if( Ethernet.begin(mac) == 0){
    Serial.println("DHCP Error!!");
    Ethernet.begin(mac, ip);
  }
  Serial.print("Server at ");
  Serial.println(Ethernet.localIP());

  webserver.setDefaultCommand(&defaultCmd);
  webserver.addCommand("dht.json", &dhtCmd);
  webserver.addCommand("bmp.json", &bmpCmd);

  webserver.begin();
}

void loop() {
  webserver.processConnection();
}
